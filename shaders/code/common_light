#include "code/u8x2_f16"
#include "code/u8x4"
#include "code/normal"
#include "code/sort4"


inline float3 inner_light(float2 uv, float depth, float3 normal, float4 colour_spec)
{
	float3 colour = colour_spec.rgb;
	float specular = colour_spec.a;

	float z_neg = -z_near / (1 - depth);
	float4 surface_pos = float4( uv_to_ray(uv) * z_neg, z_neg, 1.0 );
	float4 reprojected = mul(viewI_light_view_proj, surface_pos);

	float3 lightvec = light_pos - surface_pos.xyz;
	float l = length(lightvec);
	float fade = smoothstep(radius, radius * 0.9, l);
	if (fade == 0.0) return 0;

	float lighted = SHADOW_TEST;

    float radiance = lighted * fade *
		max(0.0, dot( lightvec, normal )) / (l * l * l) * light_scale;

	return radiance * colour * light_colour;
}

float4 common_light(PPosition input)
{
	float2 uv = input.svposition.xy * rcpres;

	float depth = zbuffer.Sample(sm_point, uv).x;
	float3 normal = normal_decode(gbuffer0.Sample(sm_point, uv).xy);
	float4 colour = gbuffer1.Sample(sm_point, uv); //! easy perf

	float3 result = inner_light(uv, depth, normal, colour);

	uint start = 4 * (input.svposition.y * res.x + input.svposition.x + 2);
	uint index = start_buffer.Load(start);
	if (index == 0) return float4(result, 1.0);

	float4 depths = 1;
	OITFragment fragments[4];

	[unroll]
	for (uint i = 0; i < 4 && index != 0; i++)
	{
		fragments[i] = scattered_buffer[index];
		uint packed = fragments[i].normal16_depth16;
		depths[i] = f16tof32(packed >> 16);
		index = fragments[i].spec8_next24 & 0x00ffffff;
	}

	uint4 indices = uint4(0, 1, 2, 3);

	sort4(depths, indices);

	[loop] [allow_uav_condition] //! loop?
	for (uint j = 0; j < i; j++)
	{
		if (depths[j] > depth) break;
		OITFragment fragment = fragments[indices[j]];
		normal = normal_decode(u8x2_f16_unpack(fragment.normal16_depth16).xy);
		colour = u8x4_unpack(fragment.colour);
		result *= (1.0 - colour.a); // alpha
		colour.a = (fragment.spec8_next24 >> 24) / 255.0; //specular
		result += inner_light(uv, depths[j], normal, colour);
	}

	//return 0;//return 0.01 * z_near / (1 - depths);
	return float4(result, 1.0);
}