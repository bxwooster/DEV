float4 common_light(float2 uv)
{
	float z_neg = -z_near / (1.0 - zbuffer.Sample(sm_point, uv).x);
	float4 surface_pos = float4( uv_to_ray(uv) * z_neg, z_neg, 1.0 );
	float4 reprojected = mul(viewI_light_view_proj, surface_pos);

	float3 lightvec = light_pos - surface_pos.xyz;
	float l = length(lightvec);
	float fade = smoothstep(radius, radius * 0.9, l);
	if (fade == 0.0) discard;

	float lighted = SHADOW_TEST;

	if (lighted == 0.0) discard;

	float3 normal = gbuffer0.Sample(sm_point, uv).xyz;
	float3 colour = gbuffer1.Sample(sm_point, uv).xyz;

    float radiance = lighted * fade *
		max(0.0, dot( lightvec, normal )) / (l * l * l) * light_scale;

	return float4(radiance * light_colour * colour, 1.0);
}