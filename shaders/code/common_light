#include "code/u16x2"
#include "code/u8x4"
#include "code/u8_u24"
#include "code/normal"
#include "code/sort4"


inline float3 inner_light(float2 uv, float depth, float3 normal, float4 colour_spec)
{
	float3 colour = colour_spec.rgb;
	float specular = colour_spec.a;

	float z_neg = -z_near / (1 - depth);
	float4 surface_pos = float4( uv_to_ray(uv) * z_neg, z_neg, 1.0 );
	float4 reprojected = mul(viewI_light_view_proj, surface_pos);

	float3 lightvec = light_pos - surface_pos.xyz;
	float l = length(lightvec);
	float fade = smoothstep(radius, radius * 0.9, l);
	if (fade == 0.0) return 0;

	float lighted = SHADOW_TEST;

    float radiance = lighted * fade *
		max(0.0, dot( lightvec, normal )) / (l * l * l) * light_scale;

	return 10 * radiance * colour * light_colour;
}

float4 common_light(PPosition input)
{
	float3 result = 0;
	int3 iuv = int3(input.svposition.xy, 0);
	float2 uv = input.svposition.xy * rcpres;

	float depth = zbuffer.Load(iuv).x;
	if (depth < 1.0)
	{
		uint2 packed = gbuffer.Load(iuv);
		float3 normal = normal_decode(u16x2_unpack(packed.x));
		float4 colour = u8x4_unpack(packed.y);
		result = inner_light(uv, depth, normal, colour);
	}
	
	uint start = 4 * (input.svposition.y * res.x + input.svposition.x + 2);
	uint index = start_buffer.Load(start);
	if (index == 0) return float4(result, 1.0);

	uint N = index >> 24;
	index = index & 0x00ffffff;

	float3 normal;
	float4 colour;

	[loop] [allow_uav_condition]
	for (uint j = 0; j < N; j++)
	{
		OITFragment fragment = consolidated_buffer[index + j];
		normal = normal_decode(u16x2_unpack(fragment.normal));
		float2 unpacked = u8_u24_unpack(fragment.alpha8_depth24);
		float alpha = unpacked.x;
		depth = unpacked.y;
		colour = u8x4_unpack(fragment.colour);
		result *= (1.0 - alpha);
		result += inner_light(uv, depth, normal, colour);
	}

	return float4(result, 1.0);
}